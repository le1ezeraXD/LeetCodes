'''624.数组列表中的最大距离
给定 m 个数组，每个数组都已经按照升序排好序了。现在你需要从两个不同的数组中选择两个整数（每个数组选一个）并且计算它们的距离。两个整数 a 和 b 之间的距离定义为它们差的绝对值 |a-b| 。你的任务就是去找到最大距离

示例 1：

输入： 
[[1,2,3],
 [4,5],
 [1,2,3]]
输出： 4
解释：
一种得到答案 4 的方法是从第一个数组或者第三个数组中选择 1，同时从第二个数组中选择 5 。
 

注意：

每个给定数组至少会有 1 个数字。列表中至少有两个非空数组。
所有 m 个数组中的数字总数目在范围 [2, 10000] 内。
m 个数组中所有整数的范围在 [-10000, 10000] 内。'''

class Solution:
    def maxDistance(self, arrays: List[List[int]]) -> int:
    	#数组按升序排列，所以数组内第一个元素一定是最小值，先取出来
        minnum = arrays[0][0]
        #同理，末尾一定是最大值，也取出
        maxnum = arrays[0][-1]
        #定义n为数组长度方便后续使用
        n = len(arrays)
        #创建变量ans记录最大距离，初始值为0
        #tips：python中整数最大值为sys.maxsize,最小值为-sys.maxsize-1
        ans = 0
        #因为列表中第一个数组的值已经记录，所以循环时可以跳过，从第二个数组开始做比较
        for i in range(1, n):
        #虽然已经确定最大距离一定是通过“大-小”获得的
        #但是不确定到底是数组i的最小值和数组i-1的最大值距离最大，还是数组i的最大值和数组i-1的最小值距离最大
        #所以需要两者都进行比对才能确定
        	#因为之前已经将数组0的第一个元素取出，所以这里直接拿来用，后面还会对minnum进行维护
            ans = max(arrays[i][-1] - minnum, ans)
            #maxnum同理
            ans = max(maxnum - arrays[i][0], ans)
            #这里对minnum和maxnum进行维护，每循环一次就维护一次，确保取到的一定是最小/最大
            minnum = min(arrays[i][0], minnum)
            maxnum = max(arrays[i][-1], maxnum)

        #返回ans即最大距离
        return ans